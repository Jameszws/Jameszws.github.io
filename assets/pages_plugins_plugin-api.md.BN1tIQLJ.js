import{_ as e,c as i,o as t,ag as s}from"./chunks/framework.Ci06YZUP.js";const k=JSON.parse('{"title":"插件API","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"pages/plugins/plugin-api.md","filePath":"pages/plugins/plugin-api.md"}'),l={name:"pages/plugins/plugin-api.md"};function o(r,a,n,p,h,d){return t(),i("div",null,a[0]||(a[0]=[s(`<h1 id="插件api" tabindex="-1">插件API <a class="header-anchor" href="#插件api" aria-label="Permalink to &quot;插件API&quot;">​</a></h1><p>类型为 <code>hook</code> 的都是钩子名称，用 <code>tap(钩子名称, callback)</code> 进行订阅。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>请先阅读<a href="./plugin-design.html">插件设计</a></p></div><h2 id="transformer" tabindex="-1">Transformer <a class="header-anchor" href="#transformer" aria-label="Permalink to &quot;Transformer&quot;">​</a></h2><ul><li>type: <a href="./../dependencies/core.html#transformer类">查看具体类型</a></li></ul><p>源代码解析器，包含三个 <strong>hooks</strong> : <code>beforeTransform</code>, <code>transforming</code>, <code>afterTransform</code>，</p><h3 id="beforetransform" tabindex="-1">beforeTransform <a class="header-anchor" href="#beforetransform" aria-label="Permalink to &quot;beforeTransform&quot;">​</a></h3><ul><li>type:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transformCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pluginLoaded</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">plugins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}&gt;</span></span></code></pre></div><p>源代码解析前</p><h4 id="transformcode" tabindex="-1">transformCode <a class="header-anchor" href="#transformcode" aria-label="Permalink to &quot;transformCode&quot;">​</a></h4><ul><li>type: <code>hook</code></li></ul><p>当执行 <code>transformCode</code> 函数时，在生成 <code>AST</code> 之前触发，可用来获取配置参数。</p><h3 id="transforming" tabindex="-1">transforming <a class="header-anchor" href="#transforming" aria-label="Permalink to &quot;transforming&quot;">​</a></h3><ul><li>type:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transformCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ParseASTType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hooks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}&gt;</span></span></code></pre></div><p>源代码解析中</p><h4 id="transformcode-1" tabindex="-1">transformCode <a class="header-anchor" href="#transformcode-1" aria-label="Permalink to &quot;transformCode&quot;">​</a></h4><ul><li>type: <code>hook</code></li></ul><p>当执行 <code>transformCode</code> 函数时，并且正在解析代码过程中触发，可在回调函数中获取到所有解析步骤中的 <strong>hooks</strong>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transformer.transforming.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;transformCode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hooks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="aftertransform" tabindex="-1">afterTransform <a class="header-anchor" href="#aftertransform" aria-label="Permalink to &quot;afterTransform&quot;">​</a></h3><ul><li>type:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transformCode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}&gt;</span></span></code></pre></div><p>源代码解析后</p><h4 id="transformcode-2" tabindex="-1">transformCode <a class="header-anchor" href="#transformcode-2" aria-label="Permalink to &quot;transformCode&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(code: string) =&gt; string</code></li></ul><p>当执行 <code>transformCode</code> 函数后，已经生成了转化后代码， 可以用此钩子修改最终代码。</p><h2 id="parsehtml" tabindex="-1">parseHTML <a class="header-anchor" href="#parsehtml" aria-label="Permalink to &quot;parseHTML&quot;">​</a></h2><ul><li>type: <a href="./../dependencies/core.html#parsehtml类">查看具体类型</a></li></ul><p><strong>html</strong> 代码解析器。</p><h3 id="parse" tabindex="-1">parse <a class="header-anchor" href="#parse" aria-label="Permalink to &quot;parse&quot;">​</a></h3><p>html代码解析前</p><h4 id="parsecode" tabindex="-1">parseCode <a class="header-anchor" href="#parsecode" aria-label="Permalink to &quot;parseCode&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(ast: ParseRootNode) =&gt; void</code></li></ul><p>当执行 <code>parseCode</code> 函数时， 开始提取语料前触发，可以在回调函数中获取到ast并对ast进行自定义处理。</p><h4 id="ignorelines" tabindex="-1">ignoreLines <a class="header-anchor" href="#ignorelines" aria-label="Permalink to &quot;ignoreLines&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(lines: number[]) =&gt; number[]</code></li></ul><p>处理代码中所有需要忽略的代码行，默认解析 <code>tci18n-ignore-line</code> 标记的代码，可以在此自定义解析需要忽略的代码行。</p><h3 id="parsing-parsehtml" tabindex="-1">parsing.parseHTML <a class="header-anchor" href="#parsing-parsehtml" aria-label="Permalink to &quot;parsing.parseHTML&quot;">​</a></h3><p>解析源代码中的html代码</p><h4 id="parsenode" tabindex="-1">parseNode <a class="header-anchor" href="#parsenode" aria-label="Permalink to &quot;parseNode&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(node: ParseChildNode) =&gt; void</code></li></ul><p>解析html节点触发，可以在此对AST节点进行处理。</p><h4 id="parseattrs" tabindex="-1">parseAttrs <a class="header-anchor" href="#parseattrs" aria-label="Permalink to &quot;parseAttrs&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(node: ParseChildNode) =&gt; void</code></li></ul><p>解析html节点所有属性触发，可以在此对AST属性节点进行处理。</p><h4 id="parseattr" tabindex="-1">parseAttr <a class="header-anchor" href="#parseattr" aria-label="Permalink to &quot;parseAttr&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(node: ParseChildNode, attr: string) =&gt; void</code></li></ul><p>解析html节点单个属性触发，可以在此对AST属性单个节点进行处理。</p><h4 id="parseinnertext" tabindex="-1">parseInnerText <a class="header-anchor" href="#parseinnertext" aria-label="Permalink to &quot;parseInnerText&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(node: ParseChildNode) =&gt; void</code></li></ul><p>解析html节点 <strong>innerText</strong> 内容时候触发，可以在此对AST节点中的 <strong>innerText</strong> 进行处理。</p><h3 id="parsing-parsejs" tabindex="-1">parsing.parseJS <a class="header-anchor" href="#parsing-parsejs" aria-label="Permalink to &quot;parsing.parseJS&quot;">​</a></h3><p>解析源代码中的js代码, 同 <a href="./plugin.html#parsejs"><code>parseJS</code></a></p><h3 id="parsed" tabindex="-1">parsed <a class="header-anchor" href="#parsed" aria-label="Permalink to &quot;parsed&quot;">​</a></h3><p>html代码解析后</p><h4 id="parsecode-1" tabindex="-1">parseCode <a class="header-anchor" href="#parsecode-1" aria-label="Permalink to &quot;parseCode&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(code: string) =&gt; string</code></li></ul><p>解析html代码完成后触发，可以在此对解析后的代码做自定义处理。</p><h2 id="parsejs" tabindex="-1">parseJS <a class="header-anchor" href="#parsejs" aria-label="Permalink to &quot;parseJS&quot;">​</a></h2><ul><li>type: <a href="./../dependencies/core.html#parsejs类">查看具体类型</a></li></ul><p><strong>javascript</strong> 代码解析器。</p><h3 id="parse-1" tabindex="-1">parse <a class="header-anchor" href="#parse-1" aria-label="Permalink to &quot;parse&quot;">​</a></h3><p><strong>javascript</strong> 代码解析前</p><h4 id="ignorelines-1" tabindex="-1">ignoreLines <a class="header-anchor" href="#ignorelines-1" aria-label="Permalink to &quot;ignoreLines&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(lines: number[]) =&gt; number[]</code></li></ul><p>处理代码中所有需要忽略的代码行，默认解析 <code>tci18n-ignore-line</code> 标记的代码，可以在此自定义解析需要忽略的代码行。</p><h3 id="parsing" tabindex="-1">parsing <a class="header-anchor" href="#parsing" aria-label="Permalink to &quot;parsing&quot;">​</a></h3><p><strong>javascript</strong> 代码解析中</p><h4 id="templateliteral" tabindex="-1">TemplateLiteral <a class="header-anchor" href="#templateliteral" aria-label="Permalink to &quot;TemplateLiteral&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.TemplateLiteral&gt;) =&gt; HookReturn</code></li></ul><p>解析AST模板字符串触发</p><h4 id="stringliteral" tabindex="-1">StringLiteral <a class="header-anchor" href="#stringliteral" aria-label="Permalink to &quot;StringLiteral&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.StringLiteral&gt;) =&gt; HookReturn</code></li></ul><p>解析AST普通字符串触发</p><h4 id="importdeclaration" tabindex="-1">ImportDeclaration <a class="header-anchor" href="#importdeclaration" aria-label="Permalink to &quot;ImportDeclaration&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.ImportDeclaration&gt;) =&gt; HookReturn</code></li></ul><p>解析AST <strong>import</strong> 依赖时触发</p><h4 id="expressionstatement" tabindex="-1">ExpressionStatement <a class="header-anchor" href="#expressionstatement" aria-label="Permalink to &quot;ExpressionStatement&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.ExpressionStatement&gt;) =&gt; HookReturn</code></li></ul><p>解析AST表达式语句时触发</p><h4 id="identifier" tabindex="-1">Identifier <a class="header-anchor" href="#identifier" aria-label="Permalink to &quot;Identifier&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.Identifier&gt;) =&gt; HookReturn</code></li></ul><p>解析AST标识符语句时触发</p><h4 id="directiveliteral" tabindex="-1">DirectiveLiteral <a class="header-anchor" href="#directiveliteral" aria-label="Permalink to &quot;DirectiveLiteral&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.DirectiveLiteral&gt;) =&gt; HookReturn</code></li></ul><p>解析AST指令字符串语句时触发</p><h4 id="objectexpression" tabindex="-1">ObjectExpression <a class="header-anchor" href="#objectexpression" aria-label="Permalink to &quot;ObjectExpression&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.ObjectExpression&gt;) =&gt; HookReturn</code></li></ul><p>解析AST对象表达式语句时触发</p><h4 id="callexpression" tabindex="-1">CallExpression <a class="header-anchor" href="#callexpression" aria-label="Permalink to &quot;CallExpression&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.CallExpression&gt;) =&gt; HookReturn</code></li></ul><p>解析AST函数调用语句时触发</p><h4 id="arrowfunctionexpression" tabindex="-1">ArrowFunctionExpression <a class="header-anchor" href="#arrowfunctionexpression" aria-label="Permalink to &quot;ArrowFunctionExpression&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.ArrowFunctionExpression&gt;) =&gt; HookReturn</code></li></ul><p>解析AST箭头函数语句时触发</p><h4 id="objectmethod" tabindex="-1">ObjectMethod <a class="header-anchor" href="#objectmethod" aria-label="Permalink to &quot;ObjectMethod&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.ObjectMethod&gt;) =&gt; HookReturn</code></li></ul><p>解析AST对象函数语句时触发</p><h4 id="functiondeclaration" tabindex="-1">FunctionDeclaration <a class="header-anchor" href="#functiondeclaration" aria-label="Permalink to &quot;FunctionDeclaration&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.FunctionDeclaration&gt;) =&gt; HookReturn</code></li></ul><p>解析AST函数声明语句时触发</p><h4 id="jsxelement" tabindex="-1">JSXElement <a class="header-anchor" href="#jsxelement" aria-label="Permalink to &quot;JSXElement&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.JSXElement &amp; { ignore?: boolean }&gt;) =&gt; HookReturn</code></li></ul><p>解析AST的JSX元素语句时触发</p><h4 id="jsxtext" tabindex="-1">JSXText <a class="header-anchor" href="#jsxtext" aria-label="Permalink to &quot;JSXText&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.JSXText&gt;) =&gt; HookReturn</code></li></ul><p>解析AST的JSX文本语句时触发</p><h4 id="jsxattribute" tabindex="-1">JSXAttribute <a class="header-anchor" href="#jsxattribute" aria-label="Permalink to &quot;JSXAttribute&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(path: babel.NodePath&lt;babel.types.JSXAttribute&gt;) =&gt; HookReturn</code></li></ul><p>解析AST的JSX属性语句时触发</p><h4 id="makei18nfunction" tabindex="-1">makeI18nFunction <a class="header-anchor" href="#makei18nfunction" aria-label="Permalink to &quot;makeI18nFunction&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(args: (babel.types.ArgumentPlaceholder | babel.types.SpreadElement | babel.types.Expression)[], t: @babel/types) =&gt; void</code></li></ul><p>解析替换函数AST代码时触发</p><h3 id="parsed-1" tabindex="-1">parsed <a class="header-anchor" href="#parsed-1" aria-label="Permalink to &quot;parsed&quot;">​</a></h3><p><strong>javascript</strong> 代码解析后</p><h4 id="parsecode-2" tabindex="-1">parseCode <a class="header-anchor" href="#parsecode-2" aria-label="Permalink to &quot;parseCode&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(code: string) =&gt; string</code></li></ul><p>解析 <strong>javascript</strong> 代码完成后触发，可以在此对解析后的代码做自定义处理。</p><h2 id="parsevue" tabindex="-1">parseVUE <a class="header-anchor" href="#parsevue" aria-label="Permalink to &quot;parseVUE&quot;">​</a></h2><ul><li>type: <a href="./../dependencies/core.html#parsevue类">查看具体类型</a></li></ul><p><strong>Vue</strong> 代码解析器。</p><h3 id="parse-2" tabindex="-1">parse <a class="header-anchor" href="#parse-2" aria-label="Permalink to &quot;parse&quot;">​</a></h3><p><strong>Vue</strong> 代码解析前</p><h4 id="parsecode-3" tabindex="-1">parseCode <a class="header-anchor" href="#parsecode-3" aria-label="Permalink to &quot;parseCode&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(code: string) =&gt; string</code></li></ul><p>解析 <strong>Vue</strong> 代码前触发，可以在此对源代码进行自定义处理。</p><h4 id="parsesfc" tabindex="-1">parseSFC <a class="header-anchor" href="#parsesfc" aria-label="Permalink to &quot;parseSFC&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(sfc: SFC) =&gt; void</code></li></ul><p>解析 <strong>Vue</strong> SFC结构时触发，可以在此对SFC进行处理。</p><h4 id="parsetemplate" tabindex="-1">parseTemplate <a class="header-anchor" href="#parsetemplate" aria-label="Permalink to &quot;parseTemplate&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(template: SFCTemplateBlock) =&gt; void</code></li></ul><p>解析 <strong>Vue.template</strong> 代码时触发，可以在此对SFC的 <strong>template</strong> 模板代码进行处理。</p><h4 id="parsescript" tabindex="-1">parseScript <a class="header-anchor" href="#parsescript" aria-label="Permalink to &quot;parseScript&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(script: SFCBlock) =&gt; void</code></li></ul><p>解析 <strong>Vue.script</strong> 代码时触发，可以在此对SFC的 <strong>script</strong> 脚本代码进行处理。</p><h3 id="parsing-template" tabindex="-1">parsing.template <a class="header-anchor" href="#parsing-template" aria-label="Permalink to &quot;parsing.template&quot;">​</a></h3><p><strong>Vue.template</strong> 代码解析中触发，同 <a href="./plugin.html#parsehtml"><code>parseHTML</code></a></p><h4 id="parsing-script" tabindex="-1">parsing.script <a class="header-anchor" href="#parsing-script" aria-label="Permalink to &quot;parsing.script&quot;">​</a></h4><p><strong>Vue.script</strong> 代码解析中触发，同 <a href="./plugin.html#parsejs"><code>parseJS</code></a></p><h3 id="parsed-2" tabindex="-1">parsed <a class="header-anchor" href="#parsed-2" aria-label="Permalink to &quot;parsed&quot;">​</a></h3><p><strong>Vue</strong> 代码解析后</p><h4 id="parsecode-4" tabindex="-1">parseCode <a class="header-anchor" href="#parsecode-4" aria-label="Permalink to &quot;parseCode&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(code: string, sourceCode: string) =&gt; string</code></li></ul><p>解析 <strong>Vue</strong> 代码完成后触发，可以在此对解析后的代码做自定义处理。</p><h4 id="parsetemplate-1" tabindex="-1">parseTemplate <a class="header-anchor" href="#parsetemplate-1" aria-label="Permalink to &quot;parseTemplate&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(template: SFCTemplateBlock) =&gt; void</code></li></ul><p>解析 <strong>Vue.template</strong> 代码完成后触发，可以在此对SFC的 <strong>template</strong> 模板代码进行处理。</p><h4 id="parsescript-1" tabindex="-1">parseScript <a class="header-anchor" href="#parsescript-1" aria-label="Permalink to &quot;parseScript&quot;">​</a></h4><ul><li>type: <code>hook</code></li><li>callback: <code>(script: SFCBlock) =&gt; void</code></li></ul><p>解析 <strong>Vue.script</strong> 代码完成后触发，可以在此对SFC的 <strong>script</strong> 脚本代码进行处理。</p>`,152)]))}const u=e(l,[["render",o]]);export{k as __pageData,u as default};
